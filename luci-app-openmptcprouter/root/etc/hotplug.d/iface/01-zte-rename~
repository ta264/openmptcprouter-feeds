#!/bin/bash

set -e

logger -t zte-rename $(env)

[ "$ACTION" = "ifup" ] || exit

_disable_interface() {
    local NAME=$1
    logger -t zte-rename "Setting interface $NAME disabled=1"
    uci set "network.${NAME}.disabled=1" || logger -t zte-rename "Failed to set ${NAME} disabled"
    uci commit network || logger -t zte-rename "Commit failed"
}

_disable_interface_by_device() {
    local INTFNAME=$1
    local TARGET=$2
    local DEVICE
    config_get DEVICE $INTFNAME device

    logger -t zte-rename "Interface $INTFNAME uses device $DEVICE, looking for $TARGET"
    if [ $DEVICE = $TARGET ]; then
        _disable_interface $INTFNAME
    fi

    local BASEINTERFACE
    config_get BASEINTERFACE $INTFNAME baseintf
    config_get DEVICE $BASEINTERFACE device
    logger -t zte-rename "Interface $BASEINTERFACE uses device $DEVICE, looking for $TARGET"
    if [ $DEVICE = $TARGET ]; then
        _disable_interface $INTFNAME
    fi
}

_enable_interface() {
    local NAME=$1
    logger -t zte-rename "Setting interface $NAME enabled"
    uci delete "network.${NAME}.disabled" || logger -t zte-rename "Failed to enable ${NAME}"
    uci commit network || logger -t zte-rename "Commit failed"
}

_enable_interface_by_device() {
    local INTFNAME=$1
    local TARGET=$2
    local DEVICE
    config_get DEVICE $INTFNAME device
    logger -t zte-rename "Interface $INTFNAME uses device $DEVICE, looking for $TARGET"

    if [ $DEVICE = $TARGET ]; then
        _enable_interface $INTFNAME
    fi

    local BASEINTERFACE
    config_get BASEINTERFACE $INTFNAME baseintf
    config_get DEVICE $BASEINTERFACE device
    logger -t zte-rename "Interface $BASEINTERFACE uses device $DEVICE, looking for $TARGET"
    if [ $DEVICE = $TARGET ]; then
        _enable_interface $INTFNAME
    fi
}

_rename_device() {
    local OLD=$1
    local NEW=$2

    logger -t zte-rename "renaming device $OLD to $NEW"
    ip link set ${OLD} name ${NEW} 2>&1 >/dev/null || logger -t zte-rename "Failed to set $OLD name to $NEW"
}


PID=$(cat /sys/class/net/$DEVICE/device/uevent | grep PRODUCT | cut -d '=' -f2 | tr -d '\n')

[ $PID = "19d2/1403/5418" ] || exit

logger -t zte-rename "found ZTE device"

IP4=$(ip -o -4 addr list $DEVICE | awk '{print $4}' | cut -d/ -f1 | sed 's/\.[^.]*$//')
logger -t zte-rename "ip: $IP4"

case $IP4 in
    "192.168.0")
        NEWNAME="eth1"
        ;;
    "192.168.1")
        NEWNAME="eth2"
        ;;
    *)
        logger -t zte-rename "Unknown IP, exiting"
        exit
esac

[ $DEVICE != $NEWNAME ] || {
    logger -t zte-rename "Interface name correct, nothing to do"
    exit
}

logger -t zte-rename "Need to rename $DEVICE with IP $IP4 to $NEWNAME"

# disable whatever random WRT interface is using this device
_disable_interface "$INTERFACE"

# disable any the WRT interface that uses the fixed device name
config_load network
config_load openmptcprouter
config_foreach _disable_interface_by_device interface "$NEWNAME"

# actually disable the WRT interfaces
ubus call network reload || { logger -t zte-rename "Disable reload failed status $?" && exit; }
sleep 10s

# if the new device exists, rename it out of the way
EXISTIF="0"
[ "$(ip link show ${NEWNAME} 2>/dev/null)" != "" ] && {
    logger -t zte-rename "Device $NEWNAME already exists, swapping $DEVICE <-> $NEWNAME"
    _rename_device "$NEWNAME" "${NEWNAME}tmp"
    EXISTIF="1"
}

_rename_device "$DEVICE" "$NEWNAME"

[ "$EXISTIF" = "1" ] && {
    _rename_device "${NEWNAME}tmp" "$DEVICE"

}

# bring back the WRT interface that uses the renamed device and the one we disabled
config_foreach _enable_interface_by_device interface "$NEWNAME"
_enable_interface "$INTERFACE"

# actually enable after the renames
ubus call network reload || { logger -t zte-rename "Enable reload failed status $?" && exit; }
sleep 10s
